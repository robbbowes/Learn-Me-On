// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201103140356_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Passwordsalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            Name = "Assimil Swedish Old"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            Name = "Korean Linguaphone"
                        });
                });

            modelBuilder.Entity("API.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LanguageEnum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageEnum = 3,
                            Name = "Swedish"
                        },
                        new
                        {
                            Id = 2,
                            LanguageEnum = 4,
                            Name = "Korean"
                        });
                });

            modelBuilder.Entity("API.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullAudio")
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonAudio")
                        .HasColumnType("TEXT");

                    b.Property<int>("LessonLanguage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            LessonAudio = "local data",
                            LessonLanguage = 3,
                            LessonStatus = 1,
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            LessonAudio = "local data",
                            LessonLanguage = 3,
                            LessonStatus = 0,
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            LessonAudio = "local data",
                            LessonLanguage = 4,
                            LessonStatus = 1,
                            Number = 1
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            LessonAudio = "local data",
                            LessonLanguage = 4,
                            LessonStatus = 0,
                            Number = 2
                        });
                });

            modelBuilder.Entity("API.Entities.Sentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LessonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecordedAudio")
                        .HasColumnType("TEXT");

                    b.Property<string>("SentenceAudio")
                        .HasColumnType("TEXT");

                    b.Property<int>("SentenceLanguage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SentenceText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Sentence");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LessonId = 1,
                            Number = 1,
                            RecordedAudio = "local saved user audio",
                            SentenceAudio = "local sentence audio file",
                            SentenceLanguage = 3,
                            SentenceText = "Hurdy gurdy"
                        },
                        new
                        {
                            Id = 2,
                            LessonId = 1,
                            Number = 2,
                            RecordedAudio = "local saved user audio 2",
                            SentenceAudio = "local sentence audio file 2",
                            SentenceLanguage = 3,
                            SentenceText = "Hurdy gurdy line 2"
                        });
                });

            modelBuilder.Entity("API.Entities.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SentenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TranslationLanguage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TranslationText")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SentenceId");

                    b.ToTable("Translation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SentenceId = 1,
                            TranslationLanguage = 1,
                            TranslationText = "The English for hurdy gurdy"
                        },
                        new
                        {
                            Id = 2,
                            SentenceId = 1,
                            TranslationLanguage = 2,
                            TranslationText = "The French for hurdy gurdy"
                        },
                        new
                        {
                            Id = 3,
                            SentenceId = 2,
                            TranslationLanguage = 1,
                            TranslationText = "The English for hurdy gurdy 2"
                        },
                        new
                        {
                            Id = 4,
                            SentenceId = 2,
                            TranslationLanguage = 2,
                            TranslationText = "The French for hurdy gurdy 2"
                        });
                });

            modelBuilder.Entity("API.Entities.Course", b =>
                {
                    b.HasOne("API.Entities.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("API.Entities.Lesson", b =>
                {
                    b.HasOne("API.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("API.Entities.Sentence", b =>
                {
                    b.HasOne("API.Entities.Lesson", "Lesson")
                        .WithMany("Sentences")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("API.Entities.Translation", b =>
                {
                    b.HasOne("API.Entities.Sentence", "Sentence")
                        .WithMany("Translations")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sentence");
                });

            modelBuilder.Entity("API.Entities.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("API.Entities.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("API.Entities.Lesson", b =>
                {
                    b.Navigation("Sentences");
                });

            modelBuilder.Entity("API.Entities.Sentence", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
